









Command
Event
Entity
View







Object Load(OjbectId)
void Save(Object)



用户
产品
价格
库存
订单
支付

下单视图：产品详情、价格、库存

下单命令：用户、产品、数量、单价

订单生成事件：用户、产品、数量、单价
订单生成结果通知：结果

库存预扣事件：库存、数量
库存预扣结果通知：结果

支付命令：订单、金额



应用场景 - 命令 - RequestResponse API
领域模型 - 事件 - 


命令网关

命令处理函数

事件处理函数

Event - Compacate - Snapshut
冷热数据分级



load order o
with user u
on o.userId = u.id
with product p
on o.productId = p.id
 with inventory i
 on p.inventoryId = i.id


o.order
o.order.orderline

u.user
u.user.address


查询视图
提交命令




事件处理平台：










位置透明
集群负载




Entity:
命令 Json
行为 JavaScript 脚本
事件 Json
状态 Json



数据处理和数据存储就近，移动业务逻辑（Actor 的行为 JavaScript脚本）

Actor Shared 分配在 node上，调度到node上的Actor容器里

Command网关：
Query网关：


Actor容器

Event存储

View存储

MessageAgent 


Protobuf定义Command、Event、Status
JavaScript定义Behavior

Hash桶地址缓存
Hash桶分布调度


Node：计算、网络、存储

内存中缓存的Actor Status数，存储中保存的snapshot数，event日志长度，


Actor Shared 分布在 Node上
Actor Pool 分布在 Pod中

存储与计算分离




Timer触发

广播关联表


产品下架，关联的未支付订单失效



冷数据脱离

快照脱机归档


Product:

User:

Order:

Payment:


use case:
1、用户浏览产品列表

2、用户查看产品详情

3、用户下达

4、用户查看订单列表

5、用户查看订单详情

6、用户支付订单

7、用户查看支付结果












Actor
B
S
M
E


SharedKey

RootActorId


User

Product

Order





MessageBus

User
User-Address

com.wzh.hello.User:10001
com.wzh.hello.User:10001










Command Gateway:
外部系统提交Command






Registry

Scheduler

Monitor

Message Bus

Event Bus

Actor Cluster

View  Cluster

Api Gateway




ApiGateway:
 RequstAcotr
 SessionActor




UseCase1:SearchProduct

Client > SearchProductRequest(SearchKeyWord) > ApiGateway 
 > ProductSummaryView > ProductSummaryList > ProductListPage

UseCase2:BrowseProduct
GetProductDetailRequest(ProductId) > ApiGateway > ProductDetailView > ProductDetail > ProductDetailPage

UseCase3:PlaseOrder
PlaseOrderRequest(ProductId, UserId, Amount) > ApiGateway 
> OrderActor > 
OrderDetailQuery(OrderId) > OrderDetail > OrderDetailPage





UseCase1:SearchProduct

Client: SearchProductRequest(ProductKeyword)->ApiGateway
ApiGateway: new SearchProductRequestActor
ApiGateway: SearchProductRequest(ProductKeyword)->SearchProductRequestActor
SearchProductRequestActor: SearchProductRequest(ProductKeyword) to SearchProductQuery(ProductKeyword)
SearchProductRequestActor: SearchProductQuery(ProductKeyword)->ProductSummaryView
ProductSummaryView: ProductSummaryList->SearchProductRequestActor
SearchProductRequestActor: ProductSummaryList->Client
SearchProductRequestActor: destroy

UseCase2:BrowseProduct

Client: GetProductDetailRequest(ProductId)->ApiGateway 
ApiGateway: new GetProductDetailRequestActor
ApiGeteway: GetProductDetailRequest(ProductId)->GetProductDetailRequestActor
GetProductDetailRequestActor: GetProductDetailRequest(ProductId) to GetProductDetailQuery(ProductId)
GetProductDetailRequestActor: GetProductDetailQuery(ProductId)->ProductDetailView
ProductDetailView: ProductDetail->GetProductDetailRequestActor
GetProductDetailRequestActor: ProductDetail->Client
GetProductDetailRequestActor: destroy

UseCase3:PlaceOrder
Client: PlaceOrderRequest(ProductId, Amount)->ApiGateway
ApiGateway: new PlaceOrderRequestActor
ApiGateway: PlaceOrderRequest(ProductId, Amount) to PlaceOrderCommand(ProductId, Amount)
PlaceOrderRequestActor: new OrderActor
PlaceOrderRequestActor: PlaceOrderCommand(ProductId, Amount)->OrderActor
OrderActor: PlaceOrderResult(OrderId)->PlaceOrderRequestActor
PlaceOrderRequestActor: OrderDetailQuery(OrderId)->OrderDetailView
OrderDetailView: OrderDetail->PlaceOrderRequestActor
PlaceOrderRequestActor: OrderDetail->Client
PlaceOrderRequestActor: destroy













LVS



ApiGateway Cluster：
Dispatcher
RequestActor
SessionActor

SearchProductActor:
 message: SearchProductRequest
 behavior: map SearchProductRequest to SearchProductQuery , send SearchProductQuery to ProductView

 message: ProductList
 behavior: return ProductList

 state: SessionActor


ProductActor







ActorNode

ActorRegion

MessageBus






ServiceActor

EntityActor






技术支撑：
APIGateway
RequestActor
SessionActor

应用场景：
View
Command
View

领域模型：
Actor
Index






Request分解成send Query to View
View 分解成send Query to 引用View
View 最终分解成 send Query to Actor or Index


View属于模型的无状态的虚拟视图
Index描述模型中Actor直接的关联关系
Actor保持状态数据组成领域模型
在actor、view、index之间传递message，
actor,view,index都是分片的，都连接message bus，位置透明

APIGateway由RequestActor和SessionActor组成，转换http请求为message

通过Index广播分组广播消息

IP组播


可本地尽量本地，可并行尽量并行





OrderActor：处理命令


OrderView

OrderWithProductView

UserOrderIndex: 处理1对多，多对多关联查询










ViewIndex








订单详情查询：
订单ID orderId

select *
from order o
join product p
on o.productId = p.id
where o.id = orderId



Client send GET /app/order/ORDER10001 to ApiGatewayNode1

ApiGatewayNode1 local new GetOrderActor and set SessionActorRef  #分发http请求到对应SessionActor所在节点上创建RequestActor

ApiGatewayNode1 send message GetOrder(OrderId=ORDER10001) to GetOrderActor

GetOrderActor send message GetUserId to SessionActor

SessionActor send message UserId=USER111 to GetOrderActor

GetOrderActor send message Query(select id, status, productId where OrderId=ORDER10001 and UserId=USER111) to OrderActor

OrderActor send message Order(id=ORDER10001, status=Created, productId=PRODUCT501) to GetOrderActor
or
OrderActor send message OrderNotExists to GetOrderActor
or
OrderActor send message NotUserOrder to GetOrderActor

GetOrderActor send messge Query(select productId, name, descript where ProductId=PRODUCT501) to ProductActor

ProductActor send message Product(id=PRODUCT501, name=the product, descript=good product) to GetOrderActor

ProductActor return Product(id=PRODUCT501, name=the product, descript=good product) to ApiGateway

ApiGetway response Product(id=PRODUCT501, name=the product, descript=good product) to Client







分页查询用户订单列表：
用户ID userId
select *
from user u
join order o
on u.id = o.orderId
join product p
on o.productId = p.id
where u.id = userId
limit 10, 10



Client send GET /app/user/orders?page=2&size=10 to ApiGatewayNode2

ApiGatewayNode2 local new GetUserOrdersActor and set SessionActorRef  #分发http请求到对应SessionActor所在节点上创建RequestActor

ApiGatewayNode2 send message GetUserOrders(page=2, size=10) to GetUserOrdersActor

GetUserOrdersActor send message GetUserId to SessionActor

SessionActor send message UserId=USER111 to GetUserOrdersActor

GetUserOrdersActor send message Query(select orderId where userId=USER111 limit 10, 10) to UserOrderIndex

UserOrderIndex send message[(orderId=ORDER10001),(orderId=1909),...] to GetUserOrdersActor

GetUserOrdersActor send messages[ Query(select id, status, productId where OrderId=ORDER10001), ...] to OrderActor












define：

UserActor
ProductActor
OrderActor
UserOrderIndex
ProductOrderIndex





























